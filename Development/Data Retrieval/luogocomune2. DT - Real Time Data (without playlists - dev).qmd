---
title: "luogocomune2 - Data Retrieval 2022.08.20"
author: "Alessandro Speranza"
date: "07/08/2022"
date-modified: "21/10/2023"
format: html
toc: true
editor: source
---

```{r}
#| include: false

knitr::opts_chunk$set(cash = TRUE,
                      cache.lazy = FALSE,
                      warning = FALSE,
                      message = FALSE,
                      echo = TRUE,
                      dpi = 180,
                      fig.width = 8,
                      fig.height = 5)

library(tidyverse)
library(httr)
library(jsonlite)
library(here)
```

## Google Authentication

```{r}
endpoints <- oauth_endpoints("google")

# IMPORTANT! Connect to Google with Alessandro Speranza account
myapp <- httr::oauth_app("dead-dogs-analytics-311702",
                   key = "930372143435-m3db5ec7dl300guvbu5i3o5khk6g6fpe.apps.googleusercontent.com",
                   secret = "BijkxeCom14MlLYtW-vfofEh")

access_token <- httr::oauth2.0_token(endpoints, myapp, scope = "https://www.googleapis.com/auth/yt-analytics.readonly")
```

## Get channel info using YouTube Data API - Real time Data

```{r}
channel_id <- "UCYAUkxkaCWJm5yoaKvqpjMQ"

api_call_channel <- str_c("https://www.googleapis.com/youtube/v3/channels?key=AIzaSyCviXCt3rQPfDaNvuFIaWCE24gNx7q0Dfs&id=",channel_id,"&part=snippet,contentDetails,statistics&maxResults=15")

api_result_channel <- httr::GET(api_call_channel)

json_result_channel <- httr::content(api_result_channel, "text", encoding="UTF-8")

# Process the raw data into a data frame
json_channel <- jsonlite::fromJSON(json_result_channel, flatten = T)

channel_info <- as.data.frame(json_channel) %>% 
  janitor::clean_names()
```

## Get the complete list of channels videos (without playlist) using YouTube Data API - Real time Data

### Retrieve all the channel videos in the first page available

```{r}
# This method is used when a channels has published videos without a playlist

# Step 1: retrieve the nextPageToken from the first page 
uploads <- channel_info %>% 
  select(items_content_details_related_playlists_uploads) %>% 
  dplyr::pull()

# uploads key = "UUYAUkxkaCWJm5yoaKvqpjMQ"

# Step 2: retrieve the uploads key from channel data frame
api_call_channel_videos_fp <- str_c("https://www.googleapis.com/youtube/v3/playlistItems?playlistId=", uploads, "&key=AIzaSyCviXCt3rQPfDaNvuFIaWCE24gNx7q0Dfs&part=snippet&maxResults=50")

api_result_channel_videos_fp <- httr::GET(api_call_channel_videos_fp)

json_result_channel_videos_fp <- httr::content(api_result_channel_videos_fp, "text", encoding="UTF-8")

# Process the raw data into a data frame
json_channel_videos_fp <- jsonlite::fromJSON(json_result_channel_videos_fp, flatten = T)

channel_videos <- as.data.frame(json_channel_videos_fp) %>% 
  janitor::clean_names() 

# Retrieve the first nextPageToken to pass to the function in order to retrieve all the other nextPageToken interactively
nextPageToken <- json_channel_videos_fp[["nextPageToken"]]
```

## Retrieve all the channel videos in the following pages available & create the final channel videos data frame

```{r}
# Function to retrieve all the nextPageToken available and create a dataframe with all the channel video details
get_all_nextPageTokens <- function (nextPageToken) {
  
  while (!is.null(nextPageToken)) {
    
    api_call_channel_videos_np <- str_c("https://www.googleapis.com/youtube/v3/playlistItems?playlistId=", uploads, "&pageToken=", nextPageToken, "&key=AIzaSyCviXCt3rQPfDaNvuFIaWCE24gNx7q0Dfs&part=snippet,status&maxResults=50")
    
    api_result_channel_videos_np <- httr::GET(api_call_channel_videos_np)
    
    json_result_channel_videos_np <- httr::content(api_result_channel_videos_np, "text", encoding="UTF-8")
    
    # Process the raw data into a data frame
    json_channel_videos_np <- jsonlite::fromJSON(json_result_channel_videos_np, flatten = T)
    
    channel_videos_np <- as.data.frame(json_channel_videos_np) %>% 
      janitor::clean_names()
    
    channel_videos <- dplyr::bind_rows(channel_videos, channel_videos_np) %>%
      janitor::clean_names() 
    
    nextPageToken <- json_channel_videos_np[["nextPageToken"]]
    
  }
  
    channel_videos
  
}

# Step 3: retrieve all the channel videos calling the function & rename the selected fields
channel_videos_info <- get_all_nextPageTokens (nextPageToken) %>%
  dplyr::rename(video_position = items_snippet_position,
                video_id = items_snippet_resource_id_video_id,
                video_title = items_snippet_title,
                video_description = items_snippet_description,
                video_published_date = items_snippet_published_at,
                video_status = items_status_privacy_status,
                playlist_id = items_snippet_playlist_id,
                channel_id = items_snippet_channel_id,
                channel_title = items_snippet_channel_title,
                total_videos = page_info_total_results,
                previous_page_token = prev_page_token) %>%
  dplyr::select(video_position,
                video_id,
                video_title,
                video_description,
                video_published_date,
                video_status,
                playlist_id,
                channel_id,
                channel_title,
                total_videos,
                next_page_token,
                previous_page_token)
```

## Get all the videos stats - Real time Data

```{r}
all_video_ids_vector <- channel_videos_info %>% 
  select(video_id) %>% 
  dplyr::pull()

get_all_videos_stats <- function(video_id) {
  
api_call_videos <- str_c("https://www.googleapis.com/youtube/v3/videos?key=AIzaSyCviXCt3rQPfDaNvuFIaWCE24gNx7q0Dfs&id=", video_id, "&part=contentDetails,recordingDetails,snippet,statistics,status,topicDetails,player&maxResults=50")  

api_result_videos <- httr::GET(api_call_videos)

json_result_videos <- httr::content(api_result_videos, "text", encoding="UTF-8")

# Process the raw data into a data frame
json_videos <- fromJSON(json_result_videos, flatten = T)

videos <- as.data.frame(json_videos) %>% 
   janitor::clean_names()  
  
}

video_stats <- map_df(all_video_ids_vector, get_all_videos_stats) %>% 
  mutate(items_statistics_view_count = as.integer(items_statistics_view_count),
         items_statistics_like_count = as.integer(items_statistics_like_count),
         items_statistics_favorite_count = as.integer(items_statistics_favorite_count),
         items_statistics_comment_count = as.integer(items_statistics_comment_count)) %>%
  rename(video_id = items_id,
         views = items_statistics_view_count,
         likes = items_statistics_like_count,
         favorites = items_statistics_favorite_count,
         comments = items_statistics_comment_count,
         video_embed_html = items_player_embed_html) %>%
  select(video_id, 
         views, 
         likes,
         favorites,
         comments,
         video_embed_html)
```

## Join playlist info & video stats - Real time Data

```{r}
final_video_stats <- channel_videos_info %>%
  inner_join(video_stats, by = "video_id") %>%
  feather::write_feather(here("Development", "Data Retrieval", "data","luogocomune2_final_video_stats.feather"))

# Save the dataset final_video_stats locally as rds file
#saveRDS(final_video_stats, here("Development", "Data Retrieval", "data", "luogocomune2_final_video_stats.rds"))
```

## Create a table using the package gt

```{r}
library(gt)
library(gtExtras)

final_video_stats %>% 
  gt() %>% 
  tab_header(
    title = "luogocomune2 - Youtube Channel Videos") %>% 
  gt_theme_guardian()
```

## Create a table using the package DT

```{r}
library(DT)

DT::datatable(final_video_stats,
                filter = "top",
                extensions = 'Buttons',
                options = list(dom='Bfrtip', buttons=c('copy', 'csv', 'excel', 'print', 'pdf')))
```

## Explore comments (under construction - don't take in consideration the deleted videos by youtube)

```{r}
get_all_videos_comments <- function(video_id) {
  
# api_call_videos <- str_c("https://www.googleapis.com/youtube/v3/videos?key=AIzaSyCviXCt3rQPfDaNvuFIaWCE24gNx7q0Dfs&id=", video_id, "&part=statistics&maxResults=50")

api_call_videos <- str_c("https://www.googleapis.com/youtube/v3/commentThreads?key=AIzaSyCviXCt3rQPfDaNvuFIaWCE24gNx7q0Dfs&videoId=", video_id, "&part=snippet%2Creplies&maxResults=50")

api_result_videos <- httr::GET(api_call_videos)

json_result_videos <- httr::content(api_result_videos, "text", encoding="UTF-8")

# Process the raw data into a data frame
json_videos <- fromJSON(json_result_videos, flatten = T)

videos <- as.data.frame(json_videos) %>% 
   janitor::clean_names()  
  
}

all_videos_stats <- map_df(all_video_ids_vector, get_all_videos_info) 

# Step 3: retrieve all the channel videos calling the function & rename the selected fields
video_comments <- get_all_nextPageTokens (nextPageToken)
```
